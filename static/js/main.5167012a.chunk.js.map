{"version":3,"sources":["components/loader.js","components/homeComponent.js","redux/actionCreator.js","redux/actionTypes.js","components/mainComponent.js","shared/baseUrl.js","redux/searchUsername.js","App.js","redux/storeConfig.js","serviceWorker.js","index.js"],"names":["Loader","props","className","tip","size","Search","Input","Option","Select","RenderLoading","isLoading","errMess","style","display","RenderCard","user","state","sort","a","b","value","map","data","key","title","login","extra","name","bordered","width","gutter","span","public_repos","public_gists","followers","following","HomePage","useState","visible","setState","marginBottom","placeholder","onSearch","search_github_user","github_user","find","x","toLowerCase","alert","searchUsername","checkUser","enterButton","defaultValue","onChange","console","log","marginTop","addUsername","type","payload","searchFailed","errmess","doLoading","withRouter","connect","fetchUsername","dispatch","username","fetch","method","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","message","path","component","to","action","concat","store","createStore","combineReducers","applyMiddleware","thunk","ConfigureStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5167012a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Spin, Space } from 'antd';\r\nimport '../App.css';\r\nconst Loader = (props) => {\r\n\r\n\r\n    return (\r\n\r\n\r\n<div className=\"overly\">\r\n\r\n        <div className=\"spinnerx\">\r\n            <Space tip=\"Loading...\" size=\"middle\">\r\n                <Spin size=\"large\" />\r\n            </Space>\r\n        </div>\r\n\r\n</div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React, { useState } from 'react';\r\nimport { Input, Card, Statistic, Row, Col, Select } from 'antd';\r\nimport '../App.css';\r\nimport Loading from './loader';\r\nconst { Search } = Input;\r\nconst { Option } = Select;\r\n\r\n\r\nconst RenderLoading = ({ isLoading, errMess }) => {\r\n\r\n    if (isLoading) {\r\n        return (<Loading />);\r\n    }\r\n    else if (errMess) {\r\n        return (\r\n            <div className=\"flex-card\">\r\n               {errMess}\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n    else {\r\n        return <div style={{display:\"none\"}}></div>;\r\n    }\r\n\r\n}\r\n\r\nconst RenderCard = ({ user, state }) => {\r\n\r\n\r\n    return (<div className=\"flex-card\">\r\n\r\n        {user.sort((a, b) => a[state.value] < b[state.value] ? 1 : -1).map((data, key) => {\r\n            return (\r\n\r\n                <div key={key} className=\"inside-map-render\">\r\n                    <Card title={data.login} extra={<b>{data.name}</b>} bordered={true} style={{ width: 300 }}>\r\n\r\n\r\n                        <Row gutter={16}>\r\n\r\n                            <Col span={12}>\r\n                                <Statistic title=\"Public Repos\" value={data.public_repos} />\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <Statistic title=\"Public gists\" value={data.public_gists} />\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <Statistic title=\"Followers\" value={data.followers} />\r\n\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <Statistic title=\"Following\" value={data.following} />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Card>\r\n                </div>\r\n            );\r\n        })}\r\n    </div>);\r\n\r\n}\r\n\r\n\r\n\r\nconst HomePage = (props) => {\r\n\r\n\r\n    const [state, setState] = useState({\r\n        value: \"followers\",\r\n        visible: true\r\n    })\r\n\r\n  \r\n\r\n    const checkUser = (value) => {\r\n\r\n        let user = props.search_github_user.github_user.find(x => x.login.toLowerCase() === value.toLowerCase());\r\n\r\n        if (user) {\r\n            alert(\"user already there!\");\r\n        }\r\n        else {\r\n            props.searchUsername(value);\r\n        }\r\n\r\n    }\r\n\r\n    const selectValue = (value) => {\r\n        console.log(value);\r\n        setState({ value: value })\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"body-container\">\r\n\r\n            <div className=\"search_box\">\r\n                <div className=\"tittle\">\r\n                    <h2>GithubCompare!</h2>\r\n                </div>\r\n                <div style={{ display: \"flex\", marginBottom: \"20px\", width: '320px' }}>\r\n\r\n                    <Search size=\"large\" placeholder=\"input search text\" onSearch={value => checkUser(value)} enterButton />\r\n\r\n                </div>\r\n                <div>\r\n                    <Select defaultValue={state.value} style={{ width: '320px' }} onChange={selectValue} >\r\n\r\n                        <Option value=\"followers\">Followers</Option>\r\n                        <Option value=\"following\">Following</Option>\r\n                        <Option value=\"public_gists\" >Public gists</Option>\r\n                        <Option value=\"public_repos\">Public repos</Option>\r\n\r\n                    </Select>\r\n                </div>\r\n                <div style={{ marginTop: \"20px\" }}>\r\n\r\n                    <RenderLoading \r\n                        isLoading={props.search_github_user.isLoading}\r\n                        errMess={props.search_github_user.errMess}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n          \r\n\r\n            <div className=\"result-box\" >\r\n\r\n                <div className=\"box-container\">\r\n\r\n                    <RenderCard user={props.search_github_user.github_user}\r\n                        state={state}\r\n\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\nexport default HomePage;","import * as ActionTypes from './actionTypes';\r\nimport { githubUrl} from '../shared/baseUrl';\r\n\r\n\r\nexport const searchUsername = (username) => (dispatch) => {\r\n\r\n   dispatch(doLoading(true));\r\n    return fetch(githubUrl +username, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    })\r\n    .then(response => {\r\n        if (response.ok) {\r\n          return response;\r\n        } else {\r\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n          error.response = response;\r\n          throw error;\r\n        }\r\n      },\r\n      error => {\r\n            throw error;\r\n      })\r\n    .then(response => response.json())\r\n    .then(response => dispatch(addUsername(response)))\r\n    .catch(error =>dispatch(searchFailed(error.message)));\r\n};\r\n\r\nexport const addUsername= (user) => ({\r\n    type: ActionTypes.ADD_USER,\r\n    payload: user\r\n});\r\n\r\nexport const searchFailed = (errmess) => ({\r\n    type: ActionTypes.SEARCH_USERNAME_FAILED,\r\n    payload: errmess\r\n});\r\n\r\nexport const doLoading = () => ({\r\n    type: ActionTypes.DO_LOADING\r\n});","export const ADD_USERS = 'ADD_USERS';\r\nexport const SEARCH_USERNAME = 'SEARCH_USERNAME';\r\nexport const ADD_USER = 'ADD_USER';\r\nexport const SEARCH_USERNAME_FAILED = 'SEARCH_USERNAME_FAILED';\r\nexport const DO_LOADING = 'FINDING_USER';","import React from 'react';\r\nimport HomePage from './homeComponent';\r\nimport { connect } from 'react-redux';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { searchUsername } from '../redux/actionCreator';\r\nconst mapStateToProps = state => {\r\n\r\n    return {\r\n\r\n        search_github_user: state.fetchUsername,\r\n    };\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n    searchUsername: (username) => dispatch(searchUsername(username)),\r\n\r\n})\r\nconst MainComponent = (props) => {\r\n\r\n    return (\r\n\r\n        <Switch>\r\n\r\n            <Route path='/home' component={(() => { return (\r\n                                                    <HomePage search_github_user={props.search_github_user} \r\n                                                    searchUsername={props.searchUsername} />\r\n                                                    \r\n                                                    ); })} />\r\n            <Redirect to=\"/home\" />\r\n\r\n        </Switch>\r\n\r\n    );\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainComponent));","export const baseUrl = 'http://localhost:3001/';\r\nexport const githubUrl = \"https://api.github.com/users/\";","import * as ActionTypes from './actionTypes';\r\n\r\nexport const search_github_user = (state = { isLoading:false,errMess: null, github_user:[]}, action) => {\r\n    switch (action.type) {\r\n  \r\n      case ActionTypes.SEARCH_USERNAME_FAILED:\r\n        return {...state,isLoading:false, errMess: action.payload};\r\n  \r\n      case ActionTypes.ADD_USER:\r\n          var user = action.payload;\r\n          return { ...state,isLoading:false,errMess:null,github_user:state.github_user.concat(user)};\r\n      case ActionTypes.DO_LOADING:\r\n          return {...state,isLoading:true,errMess:null};\r\n      default:\r\n        return state;\r\n    }\r\n  };","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/mainComponent';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport ConfigureStore from './redux/storeConfig';\n\nconst store = ConfigureStore();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <BrowserRouter>\n           <MainComponent/>\n        </BrowserRouter>\n      </Provider>\n    \n    </div>\n  );\n}\n\nexport default App;\n","import {createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n//import logger from 'redux-logger';\r\nimport {search_github_user } from './searchUsername';\r\n\r\nconst ConfigureStore = () => {\r\n    const store = createStore(\r\n        \r\n        combineReducers({\r\n        fetchUsername:search_github_user,\r\n    \r\n        }),\r\n        applyMiddleware(thunk)\r\n    );\r\n\r\n    return store;\r\n}\r\n\r\nexport default ConfigureStore;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}